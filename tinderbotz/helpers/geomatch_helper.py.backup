from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.common.exceptions import *
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys
import time
import random
import re
from tinderbotz.helpers.xpaths import content
from datetime import datetime

class GeomatchHelper:

    delay = 5
    HOME_URL = "https://www.tinder.com/app/recs"

    def __init__(self, browser):
        self.browser = browser
        if "/app/recs" not in self.browser.current_url:
            self._get_home_page()

    def _get_home_page(self):
        self.browser.get(self.HOME_URL)
        time.sleep(3)

    def check_out_of_matches(self):
        """
        Check if we've run out of matches in current area
        Returns True if out of matches, False otherwise
        """
        try:
            # Look for the "run out of matches" message
            out_of_matches_xpath = "//div[contains(@class, 'Mb(20px)') and contains(text(), \"We've run out of potential matches in your area\")]"
            
            out_of_matches_element = self.browser.find_element(By.XPATH, out_of_matches_xpath)
            if out_of_matches_element:
                print("üö´ Out of matches in current location!")
                return True
        except NoSuchElementException:
            pass
        
        return False

    def change_location(self, city_name):
        """
        FIXED: Change location using updated XPath selectors based on actual HTML
        """
        print(f"\nüåç Changing location to: {city_name}")
        
        try:
            # Step 1: Click on profile/avatar
            print("   üìã Step 1: Opening profile...")
            profile_xpaths = [
                "//a[contains(@class, 'Mx(8px)') and @title='My Profile' and @href='/app/profile']",
                "//a[@title='My Profile' and @href='/app/profile']",
                "//a[@href='/app/profile']"
            ]
            
            profile_clicked = False
            for xpath in profile_xpaths:
                try:
                    profile_btn = WebDriverWait(self.browser, 3).until(
                        EC.element_to_be_clickable((By.XPATH, xpath))
                    )
                    profile_btn.click()
                    time.sleep(2)
                    profile_clicked = True
                    print("   ‚úÖ Profile opened")
                    break
                except TimeoutException:
                    continue
            
            if not profile_clicked:
                print("   ‚ùå Could not find profile button")
                return False

            # Step 2: Click on Location setting
            print("   üìç Step 2: Opening location settings...")
            location_xpaths = [
                "//a[@aria-label='Location' and contains(@href, '/app/settings/plus/passport')]",
                "//span[contains(text(), 'Location')]/..",
                "//span[contains(text(), 'Location')]/../../..",
                "//a[contains(@href, 'passport')]"
            ]
            
            location_clicked = False
            for xpath in location_xpaths:
                try:
                    location_btn = WebDriverWait(self.browser, 3).until(
                        EC.element_to_be_clickable((By.XPATH, xpath))
                    )
                    location_btn.click()
                    time.sleep(3)  # Wait longer for location page to load
                    location_clicked = True
                    print("   ‚úÖ Location settings opened")
                    break
                except TimeoutException:
                    continue
            
            if not location_clicked:
                print("   ‚ùå Could not find location settings - you may need Tinder Plus/Passport")
                return False

            # Step 3: Find and click search input - UPDATED with actual HTML structure
            print(f"   üîç Step 3: Searching for {city_name}...")
            
            # Multiple search input selectors based on the actual HTML you provided
            search_xpaths = [
                "//input[@aria-label='Search a Location' and @placeholder='Search a Location']",
                "//input[@placeholder='Search a Location']",
                "//input[contains(@class, 'W(100%)') and contains(@class, 'Typs(body-1-regular)')]",
                "//input[@aria-label='Search a Location']",
                "//div[contains(@class, 'D(f)') and contains(@class, 'Fxd(r)')]//input",
                "//input[@type='text']"
            ]
            
            search_input = None
            for xpath in search_xpaths:
                try:
                    search_input = WebDriverWait(self.browser, 5).until(
                        EC.element_to_be_clickable((By.XPATH, xpath))
                    )
                    break
                except TimeoutException:
                    continue
            
            if not search_input:
                print("   ‚ùå Could not find search input")
                print("   üí° This might mean:")
                print("      - Tinder Passport is not available on your account") 
                print("      - Page structure has changed")
                print("      - You need Tinder Plus subscription")
                return False
            
            # Clear and enter city name
            search_input.clear()
            city_search = city_name.split(',')[0].strip()  # Just city name, e.g. "Istanbul"
            search_input.send_keys(city_search)
            time.sleep(3)  # Wait for dropdown to appear
            print("   ‚úÖ City name entered, waiting for dropdown...")

            # Step 4: Click on dropdown result - UPDATED with actual HTML structure
            print("   üìã Step 4: Selecting from dropdown...")
            
            # Multiple dropdown selectors based on your actual HTML
            dropdown_xpaths = [
                f"//div[@role='button' and .//h3[contains(text(), '{city_search}')]]",
                f"//h3[contains(text(), '{city_search}')]/../../..",
                f"//div[contains(@class, 'Py(8px)') and .//h3[contains(text(), '{city_search}')]]",
                f"//div[contains(@class, 'D(f)') and contains(@class, 'Trsdu($fast)') and .//h3[contains(text(), '{city_search}')]]",
                "//div[@role='button' and @tabindex='0' and @aria-selected='false']",
                "//div[contains(@class, 'passport__search__item')]"
            ]
            
            dropdown_clicked = False
            for xpath in dropdown_xpaths:
                try:
                    dropdown_item = WebDriverWait(self.browser, 5).until(
                        EC.element_to_be_clickable((By.XPATH, xpath))
                    )
                    dropdown_item.click()
                    time.sleep(4)  # Wait for map to load
                    dropdown_clicked = True
                    print("   ‚úÖ Dropdown selection made")
                    break
                except TimeoutException:
                    continue
            
            if not dropdown_clicked:
                print("   ‚ùå Could not find dropdown item")
                print(f"   üí° Try searching for: {city_search}")
                return False

            # Step 5: Click on location marker - UPDATED with actual HTML structure
            print("   üìå Step 5: Confirming location...")
            
            # Multiple marker selectors based on your actual HTML
            marker_xpaths = [
                "//div[contains(@class, 'passport__locationMarker')]",
                f"//h1[contains(text(), '{city_search}')]/../../../../..",
                "//div[@role='button' and @tabindex='0' and contains(@class, 'passport__locationMarker')]",
                "//div[contains(@class, 'Pos(a)') and contains(@class, 'Fxd(r)') and contains(@class, 'Bdrs(4px)')]",
                f"//div[.//h1[contains(text(), '{city_search}')]]"
            ]
            
            marker_clicked = False
            for xpath in marker_xpaths:
                try:
                    marker = WebDriverWait(self.browser, 8).until(
                        EC.element_to_be_clickable((By.XPATH, xpath))
                    )
                    
                    # Scroll marker into view
                    self.browser.execute_script("arguments[0].scrollIntoView(true);", marker)
                    time.sleep(1)
                    
                    # Try clicking the marker
                    marker.click()
                    time.sleep(3)
                    marker_clicked = True
                    print("   ‚úÖ Location marker clicked")
                    break
                except TimeoutException:
                    continue
                except Exception as e:
                    print(f"   ‚ö†Ô∏è Marker click error: {e}")
                    continue
            
            if not marker_clicked:
                print("   ‚ùå Could not find or click location marker")
                print("   üí° The map might still be loading, trying to continue...")

            # Step 6: Return to swiping
            print("   üè† Step 6: Returning to swiping...")
            self.browser.get(self.HOME_URL)
            time.sleep(3)
            
            print(f"‚úÖ Location change process completed for {city_name}")
            print("   üí° If location didn't change, you may need Tinder Plus/Passport")
            return True

        except Exception as e:
            print(f"‚ùå Error changing location: {e}")
            # Try to return to home page anyway
            try:
                self.browser.get(self.HOME_URL)
                time.sleep(2)
            except:
                pass
            return False

    def dismiss_upgrade_popup(self):
        """
        Dismiss the 'Upgrade Your Like' popup
        """
        try:
            # Multiple patterns for "No Thanks" button
            no_thanks_xpaths = [
                "//button[.//div[contains(@class, 'lxn9zzn') and contains(text(), 'No Thanks')]]",
                "//div[contains(text(), 'No Thanks')]/ancestor::button",
                "//button[contains(text(), 'No Thanks')]",
                "//button[contains(@class, 'c1p6lbu0') and .//div[text()='No Thanks']]"
            ]
            
            for xpath in no_thanks_xpaths:
                try:
                    btn = self.browser.find_element(By.XPATH, xpath)
                    btn.click()
                    time.sleep(1)
                    print("   üîß Dismissed upgrade popup")
                    return True
                except NoSuchElementException:
                    continue
        
        except Exception:
            pass
        
        return False

    def like(self) -> bool:
        """
        ENHANCED like method with smart detection
        """
        try:
            # First check for popups and dismiss them
            if self.dismiss_upgrade_popup():
                time.sleep(1)
            
            # Method 1: Try keyboard shortcut first (most reliable)
            try:
                action = ActionChains(self.browser)
                action.send_keys(Keys.ARROW_RIGHT).perform()
                time.sleep(0.3)
                print("   üëç Liked using keyboard")
                return True
            except Exception:
                pass
            
            # Method 2: Look for like button with multiple selectors
            like_button_xpaths = [
                "//div[contains(@class, 'gamepad-button-wrapper')]//button[contains(@class, 'gamepad-button')]//span[text()='Like']",
                "//button[contains(@class, 'gamepad-button') and .//span[text()='Like']]",
                "//div[contains(@class, 'gamepad-button-wrapper')]//button[contains(@class, 'gamepad-button')]",
                "//button[contains(@class, 'Bgc($c-ds-background-gamepad-sparks-like-default)')]"
            ]
            
            for xpath in like_button_xpaths:
                try:
                    like_btn = WebDriverWait(self.browser, 1).until(
                        EC.element_to_be_clickable((By.XPATH, xpath))
                    )
                    
                    if like_btn.is_displayed() and like_btn.is_enabled():
                        like_btn.click()
                        time.sleep(0.3)
                        print("   üëç Liked using button click")
                        return True
                except:
                    continue
            
            print("   ‚ö†Ô∏è No like button available - may be out of profiles")
            return False
            
        except Exception as e:
            print(f"   ‚ùå Like error: {e}")
            return False

    def dislike(self) -> bool:
        """
        Enhanced dislike method
        """
        try:
            if self.dismiss_upgrade_popup():
                time.sleep(1)
            
            # Try keyboard shortcut first
            try:
                action = ActionChains(self.browser)
                action.send_keys(Keys.ARROW_LEFT).perform()
                time.sleep(0.3)
                return True
            except:
                pass
            
            # Try button selectors
            dislike_selectors = [
                "//button[contains(@class, 'gamepad-button') and .//span[text()='Pass']]",
                "//div[contains(@class, 'gamepad-button-wrapper')]//button[1]"
            ]
            
            for selector in dislike_selectors:
                try:
                    btn = self.browser.find_element(By.XPATH, selector)
                    if btn.is_displayed() and btn.is_enabled():
                        btn.click()
                        time.sleep(0.3)
                        return True
                except:
                    continue
            
            return False
            
        except Exception as e:
            print(f"   ‚ùå Dislike error: {e}")
            return False

    def superlike(self):
        """Enhanced superlike"""
        try:
            if self.dismiss_upgrade_popup():
                time.sleep(1)
            
            action = ActionChains(self.browser)
            action.send_keys(Keys.ARROW_UP).perform()
            time.sleep(0.3)
            return True
        except:
            return False

    def smart_swipe_session(self, cities, swipes_per_city=25):
        """
        Intelligent swiping session with better error handling
        """
        print(f"\nü§ñ SMART SWIPE SESSION STARTED")
        print(f"   üåç Cities: {len(cities)}")
        print(f"   üëç Swipes per city: {swipes_per_city}")
        
        stats = {
            'cities_visited': 0,
            'total_swipes': 0,
            'likes': 0,
            'dislikes': 0,
            'location_changes': 0,
            'popups_dismissed': 0,
            'successful_cities': []
        }
        
        for city_index, city in enumerate(cities):
            print(f"\nüìç City {city_index + 1}/{len(cities)}: {city}")
            
            # Try to change location
            location_changed = self.change_location(city)
            if location_changed:
                stats['location_changes'] += 1
                stats['cities_visited'] += 1
                stats['successful_cities'].append(city)
                time.sleep(3)  # Wait for location change to take effect
                
                # Swipe in this city
                city_swipes = self._swipe_in_city(city, swipes_per_city, stats)
                
                if city_swipes == 0:
                    print(f"   ‚ö†Ô∏è No swipes completed in {city}")
                
            else:
                print(f"   ‚ùå Failed to change to {city}, skipping...")
                continue
            
            # Brief pause between cities
            if city_index < len(cities) - 1:
                print("   ‚è∏Ô∏è Brief pause before next city...")
                time.sleep(3)
        
        # Final statistics
        print(f"\nüéâ SMART SWIPE SESSION COMPLETED!")
        print(f"   üåç Cities visited: {stats['cities_visited']}")
        print(f"   ‚úÖ Successful cities: {stats['successful_cities']}")
        print(f"   üìç Location changes: {stats['location_changes']}")  
        print(f"   üëç Total likes: {stats['likes']}")
        print(f"   üëé Total dislikes: {stats['dislikes']}")
        print(f"   üìä Total swipes: {stats['total_swipes']}")
        print(f"   üîß Popups dismissed: {stats['popups_dismissed']}")
        
        if stats['total_swipes'] > 0:
            like_rate = (stats['likes'] / stats['total_swipes']) * 100
            print(f"   üìà Overall like rate: {like_rate:.1f}%")
        
        return stats

    def _swipe_in_city(self, city, max_swipes, stats):
        """
        Swipe profiles in a specific city
        """
        city_swipes = 0
        city_likes = 0
        city_dislikes = 0
        
        while city_swipes < max_swipes:
            # Check if we ran out of matches
            if self.check_out_of_matches():
                print(f"   üö´ Ran out of matches in {city} after {city_swipes} swipes")
                break
            
            # Dismiss any popups
            if self.dismiss_upgrade_popup():
                stats['popups_dismissed'] += 1
                continue
            
            # Decide like or dislike (85% like rate)
            should_like = random.random() < 0.85
            
            if should_like:
                if self.like():
                    city_likes += 1
                    stats['likes'] += 1
                    print(f"   üëç {city_swipes + 1}/{max_swipes}: Liked")
                else:
                    print(f"   ‚ö†Ô∏è Like failed - may be out of profiles")
                    break
            else:
                if self.dislike():
                    city_dislikes += 1
                    stats['dislikes'] += 1
                    print(f"   üëé {city_swipes + 1}/{max_swipes}: Disliked")
                else:
                    print(f"   ‚ö†Ô∏è Dislike failed")
                    break
            
            city_swipes += 1
            stats['total_swipes'] += 1
            
            # Smart delay
            delay = random.uniform(0.5, 2.5)
            time.sleep(delay)
            
            # Progress update every 10 swipes
            if city_swipes % 10 == 0:
                success_rate = (city_likes / city_swipes) * 100 if city_swipes > 0 else 0
                print(f"   üìä Progress: {city_swipes}/{max_swipes} | Likes: {city_likes} | Rate: {success_rate:.1f}%")
        
        print(f"   ‚úÖ {city} completed: {city_swipes} swipes, {city_likes} likes, {city_dislikes} dislikes")
        return city_swipes

    # Keep existing methods for compatibility
    def get_name(self):
        try:
            xpath = f'{content}/div/div[1]/div/main/div[1]/div/div/div[1]/div/div/div[3]/div[3]/div/div[1]/div/div/span'
            element = self.browser.find_element(By.XPATH, xpath)
            return element.text
        except:
            try:
                element = self.browser.find_element(By.XPATH, "//h1[@itemprop='name']")
                return element.text
            except:
                return None

    def get_age(self):
        try:
            xpath = f'{content}/div/div[1]/div/main/div[1]/div/div/div[1]/div/div/div[3]/div[3]/div/div[1]/div/span'
            element = self.browser.find_element(By.XPATH, xpath)
            age_text = element.text
            age = int(''.join(filter(str.isdigit, age_text)))
            return age
        except:
            return None

    def get_bio_and_passions(self):
        bio = None
        passions = []
        lifestyle = []
        basics = []
        anthem = None
        looking_for = None
        
        try:
            bio_xpath = f'{content}/div/div[1]/div/main/div[1]/div/div/div[1]/div/div/div[3]/div[3]/div/div[2]/div/div'
            bio_element = self.browser.find_element(By.XPATH, bio_xpath)
            bio = bio_element.text
        except:
            pass
        
        try:
            passions_xpath = "//div[contains(@class, 'Bdrs(100px)')]"
            passion_elements = self.browser.find_elements(By.XPATH, passions_xpath)
            for element in passion_elements:
                text = element.text
                if text:
                    passions.append(text)
        except:
            pass
        
        return bio, passions, lifestyle, basics, anthem, looking_for

    def get_image_urls(self, quickload=True):
        image_urls = []
        
        try:
            image_elements = self.browser.find_elements(By.XPATH, "//div[@aria-label='Profile slider']")
            for element in image_elements:
                style = element.get_attribute('style')
                if 'background-image' in style:
                    url = style.split('url("')[1].split('")')[0]
                    if url not in image_urls:
                        image_urls.append(url)
            
            if not quickload:
                try:
                    bullets = self.browser.find_elements(By.CLASS_NAME, 'bullet')
                    for bullet in bullets:
                        bullet.click()
                        time.sleep(0.5)
                        
                        image_elements = self.browser.find_elements(By.XPATH, "//div[@aria-label='Profile slider']")
                        for element in image_elements:
                            style = element.get_attribute('style')
                            if 'background-image' in style:
                                url = style.split('url("')[1].split('")')[0]
                                if url not in image_urls:
                                    image_urls.append(url)
                except:
                    pass
        except:
            pass
        
        return image_urls

    def get_insta(self, bio):
        if bio:
            pattern = r'@[\w.]+|(?:ig|instagram|insta)[:\s]+[\w.]+'
            match = re.search(pattern, bio, re.IGNORECASE)
            if match:
                return match.group(0)
        return None

    def get_row_data(self):
        rowdata = {}
        
        try:
            distance_elements = self.browser.find_elements(By.XPATH, "//div[contains(text(), 'kilometers away') or contains(text(), 'miles away')]")
            if distance_elements:
                text = distance_elements[0].text
                distance = int(''.join(filter(str.isdigit, text.split()[0])))
                rowdata['distance'] = distance
        except:
            rowdata['distance'] = None
        
        try:
            info_rows = self.browser.find_elements(By.XPATH, "//div[@class='Row']")
            for row in info_rows:
                text = row.text
                if 'lives in' in text.lower():
                    rowdata['home'] = text.replace('Lives in', '').strip()
                elif 'works at' in text.lower() or 'works as' in text.lower():
                    rowdata['work'] = text
                elif 'studies' in text.lower() or 'went to' in text.lower():
                    rowdata['study'] = text
        except:
            pass
        
        return rowdata

    def handle_popups_fast(self):
        """Quick popup handler"""
        common_popups = [
            "//button[contains(text(), 'No Thanks')]",
            "//button[contains(text(), 'Maybe Later')]",
            "//button[@aria-label='Close']",
            "//button[contains(text(), 'Not Interested')]"
        ]
        
        for selector in common_popups:
            try:
                btn = self.browser.find_element(By.XPATH, selector)
                btn.click()
                return True
            except:
                continue
        
        return False